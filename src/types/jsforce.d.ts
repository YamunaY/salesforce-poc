/** Declaration file generated by dts-gen */

export class Connection {
    constructor(options: any);

    authorize(code: any, params: any, callback: any): any;

    create(type: any, records: any, options: any, callback: any): any;

    del(type: any, ids: any, options: any, callback: any): any;

    delete(type: any, ids: any, options: any, callback: any): any;

    deleted(type: any, start: any, end: any, callback: any): any;

    describe(type: any, callback: any): any;

    describeGlobal(callback: any): any;

    describeSObject(type: any, callback: any): any;

    destroy(type: any, ids: any, options: any, callback: any): any;

    identity(options: any, callback: any): any;

    initialize(options: any): any;

    insert(type: any, records: any, options: any, callback: any): any;

    limits(callback: any): any;

    login(username: any, password: any, callback: any): any;

    loginByOAuth2(username: any, password: any, callback: any): any;

    loginBySoap(username: any, password: any, callback: any): any;

    logout(revoke: any, callback: any): any;

    logoutByOAuth2(revoke: any, callback: any): any;

    logoutBySoap(revoke: any, callback: any): any;

    query(soql: any, options: any, callback: any): any;

    queryAll(soql: any, options: any, callback: any): any;

    queryMore(locator: any, options: any, callback: any): any;

    quickAction(actionName: any): any;

    quickActions(callback: any): any;

    recent(type: any, limit: any, callback: any): any;

    request(request: any, options: any, callback: any): any;

    requestDelete(url: any, options: any, callback: any): any;

    requestGet(url: any, options: any, callback: any): any;

    requestPatch(url: any, body: any, options: any, callback: any): any;

    requestPost(url: any, body: any, options: any, callback: any): any;

    requestPut(url: any, body: any, options: any, callback: any): any;

    retrieve(type: any, ids: any, options: any, callback: any): any;

    search(sosl: any, callback: any): any;

    sobject(type: any): any;

    tabs(callback: any): any;

    theme(callback: any): any;

    update(type: any, records: any, options: any, callback: any): any;

    updated(type: any, start: any, end: any, callback: any): any;

    upsert(type: any, records: any, extIdField: any, options: any, callback: any): any;

}

export class Date {
    constructor(literal: any);

    toJSON(): any;

    toString(): any;

    static LAST_N_DAYS(num: any): any;

    static LAST_N_FISCAL_QUARTERS(num: any): any;

    static LAST_N_FISCAL_YEARS(num: any): any;

    static LAST_N_MONTHS(num: any): any;

    static LAST_N_QUARTERS(num: any): any;

    static LAST_N_WEEKS(num: any): any;

    static LAST_N_YEARS(num: any): any;

    static NEXT_N_DAYS(num: any): any;

    static NEXT_N_FISCAL_QUARTERS(num: any): any;

    static NEXT_N_FISCAL_YEARS(num: any): any;

    static NEXT_N_MONTHS(num: any): any;

    static NEXT_N_QUARTERS(num: any): any;

    static NEXT_N_WEEKS(num: any): any;

    static NEXT_N_YEARS(num: any): any;

    static parseDate(str: any): any;

    static toDateLiteral(date: any): any;

    static toDateTimeLiteral(date: any): any;

}

export class OAuth2 {
    constructor(options: any);

    authenticate(username: any, password: any, callback: any): any;

    getAuthorizationUrl(params: any): any;

    refreshToken(refreshToken: any, callback: any): any;

    requestToken(code: any, params: any, callback: any): any;

    revokeToken(token: any, callback: any): any;

}

export class Promise {
    constructor(fn: any);

    catch(onRejected: any): any;

    fail(onRejected: any): any;

    then(onFulfilled: any, onRejected: any): any;

    thenCall(callback: any): any;

    static all(arr: any): any;

    static defer(): any;

    static race(values: any): any;

    static reject(value: any): any;

    static resolve(value: any): any;

}

export class RecordStream {
    constructor();

    filter(fn: any): any;

    map(fn: any): any;

    static DataStreamConverters: {
        csv: {
            parse: any;
            serialize: any;
        };
    };

    static filter(fn: any): any;

    static map(fn: any): any;

    static recordMapStream(record: any, noeval: any): any;

}

export class SfDate {
    constructor(literal: any);

    toJSON(): any;

    toString(): any;

    static LAST_N_DAYS(num: any): any;

    static LAST_N_FISCAL_QUARTERS(num: any): any;

    static LAST_N_FISCAL_YEARS(num: any): any;

    static LAST_N_MONTHS(num: any): any;

    static LAST_N_QUARTERS(num: any): any;

    static LAST_N_WEEKS(num: any): any;

    static LAST_N_YEARS(num: any): any;

    static NEXT_N_DAYS(num: any): any;

    static NEXT_N_FISCAL_QUARTERS(num: any): any;

    static NEXT_N_FISCAL_YEARS(num: any): any;

    static NEXT_N_MONTHS(num: any): any;

    static NEXT_N_QUARTERS(num: any): any;

    static NEXT_N_WEEKS(num: any): any;

    static NEXT_N_YEARS(num: any): any;

    static parseDate(str: any): any;

    static toDateLiteral(date: any): any;

    static toDateTimeLiteral(date: any): any;

}

export const VERSION: string;

export function addListener(type: any, listener: any): any;

export function emit(type: any, args: any): any;

export function eventNames(): any;

export function getMaxListeners(): any;

export function listenerCount(type: any): any;

export function listeners(type: any): any;

export function off(type: any, listener: any): any;

export function on(type: any, listener: any): any;

export function once(type: any, listener: any): any;

export function prependListener(type: any, listener: any): any;

export function prependOnceListener(type: any, listener: any): any;

export function rawListeners(type: any): any;

export function removeAllListeners(type: any, ...args: any[]): any;

export function removeListener(type: any, listener: any): any;

export function require(name: any): any;

export function setMaxListeners(n: any): any;

export namespace Date {
    namespace LAST_90_DAYS {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_90_DAYS {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace TODAY {
        function toJSON(): any;

        function toString(): any;

    }

    namespace TOMORROW {
        function toJSON(): any;

        function toString(): any;

    }

    namespace YESTERDAY {
        function toJSON(): any;

        function toString(): any;

    }

}

export namespace RecordStream {
    class Parsable {
        constructor();

        addListener(ev: any, fn: any): any;

        on(ev: any, fn: any): any;

        stream(type: any, options: any): any;

    }

    class Serializable {
        constructor();

        stream(type: any, options: any): any;

    }

}

export namespace SfDate {
    namespace LAST_90_DAYS {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace LAST_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_90_DAYS {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace NEXT_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_FISCAL_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_FISCAL_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_MONTH {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_QUARTER {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_WEEK {
        function toJSON(): any;

        function toString(): any;

    }

    namespace THIS_YEAR {
        function toJSON(): any;

        function toString(): any;

    }

    namespace TODAY {
        function toJSON(): any;

        function toString(): any;

    }

    namespace TOMORROW {
        function toJSON(): any;

        function toString(): any;

    }

    namespace YESTERDAY {
        function toJSON(): any;

        function toString(): any;

    }

}

export namespace registry {
    function getClient(name: any): any;

    function getClientNames(): any;

    function getConnection(name: any): any;

    function getConnectionConfig(name: any): any;

    function getConnectionNames(): any;

    function registerClient(name: any, clientConfig: any): void;

    function removeConnectionConfig(name: any): void;

    function saveConnectionConfig(name: any, connConfig: any): void;

    function setDefaultConnection(name: any): void;

}

export namespace StreamingExtension {
    export class Replay {
        constructor(channel: string, replayId: number)
    }
    export class AuthFailure {
        constructor(failureCallback: () => object)
    }
}

export type StreamingExtension<T = StreamingExtension.Replay | StreamingExtension.AuthFailure> = {};


